[{
  "tag": "H1",
  "text": "64 Lessons from 50 Years of Software Experience",
  "translation": "50年软件经验中的64课"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/0*wZ6UBneZsWkiy3e1.jpg?q=20",
  "type": "image",
  "file": "0!wZ6UBneZsWkiy3e1.jpg"
}, {
  "tag": "P",
  "text": "I took my first programming class (FORTRAN, of course) in college in 1970. I spent a lot of time in the past half-century doing software work: requirements, design, user experience, programming, testing, project management, writing documentation, process improvement leadership, writing 7 books and many articles, consulting, and training.",
  "translation": "1970年，我在大学上了第一门编程课（当然是FORTRAN）。在过去的半个世纪中，我花了很多时间从事软件工作：需求，设计，用户体验，编程，测试，项目管理，编写文档， 过程改进领导，撰写7本书和许多文章，进行咨询和培训。"
}, {
  "tag": "P",
  "text": "Sure, there were some side trips along the way, like getting a PhD in organic chemistry (one-third of my thesis was computer code) and working as a research scientist for a few years. But basically I’m a software guy.",
  "translation": "当然，在这过程中还存在一些附带问题，例如获得有机化学博士学位（我的论文的三分之一是计算机代码）并担任研究科学家几年。 但基本上我是一个软件专家。"
}, {
  "tag": "P",
  "text": "Over all that time, I’ve accumulated numerous insights about the software business. Here I offer 64 of those lessons. Perhaps you’ll find them as helpful as I have.",
  "translation": "在过去的这段时间里，我积累了许多有关软件业务的见解。 在这里，我提供其中的64课。 也许您会发现它们像我一样有帮助。"
}, {
  "tag": "H1",
  "text": "On Requirements",
  "translation": "根据要求"
}, {
  "tag": "OL",
  "texts": ["If you don’t get the requirements right, it doesn’t matter how well you execute the rest of the project. You will fail.", "A collection of sticky notes you found on your desk after lunch, saved voice mails and emails, and a half-remembered collection of random hallway conversations do not constitute a set of requirements. It’s just a pile of information.", "Nowhere more than in the requirements process do the interests of all the project stakeholders intersect.", "Without high-quality requirements, stakeholders might be surprised at what is delivered. Software surprises are almost always bad news.", "When exploring requirements, think beyond the hands-on users. Your customer once removed is still your customer.", "People don’t simply “gather” requirements. Requirements elicitation is a process of exploration, collaboration, discovery, and invention, not a simple collection process. A business analyst is not a mere scribe.", "The purpose of requirements elicitation is to bring the voice of the customer — the VOC — as close as possible to the ear of the developer — the EOD. The business analyst facilitates bridging that communication gap.", "Two commonly used requirements elicitation practices are telepathy and clairvoyance. They don’t work.", "Despite what our culture maintains, the customer is not always right. But the customer always has a point, and you have to understand and respect that point.", "Requirements development demands iteration. You can’t get all the requirements right with the first discussion; you probably can’t get them all right ever. Effective requirements development involves the progressive refinement of detail and clarity.", "Don’t be afraid of documenting requirements. The cost of recording knowledge is small compared to the cost of acquiring that knowledge.", "If some capability or characteristic is not described in the requirements, no one should expect to see it in the product.", "The deliverable from requirements development is not just a set of written requirements. It is a shared understanding and a shared set of expectations.", "The realistic goal of requirements development is not to create a perfect set of requirements, but to create requirements that are good enough to let the team proceed with construction at an acceptable level of risk. That risk is having to do excessive, unplanned rework because of overlooked, unnecessary, incomplete, ambiguous, or poorly communicated requirements.", "We sometimes express requirements casually because we assume the reader has a “sensibility filter” similar to our own, but people often interpret the same statements in different ways. This ambiguity leads to mismatched expectations and surprises upon delivery.", "Keep requirements workshops and review teams small. A large group of people cannot agree to leave a burning room, let alone agree on exactly how some requirement should be worded.", "The first question to ask when someone proposes a new requirement is, “Is this in scope?” If yes, it must be addressed. If no, it does not, at least not now. But if the answer is “No, but it ought to be,” then you must adjust the scope to accommodate it. This has implications for cost, schedule, resources, commitments, priorities, and trade-offs.", "If you don’t have a documented and agreed-to project scope, how can you even tell if you’re experiencing scope creep?", "Avoid “decibel prioritization” when deciding which features to include in a product or iteration. The loudest customers aren’t necessarily demanding those features that are most important from a business perspective.", "Project stakeholders must understand the difference between discussing a possible requirement and committing to include it in the product.", "Two terms that should make your blood run cold are “assumed requirements” and “implied requirements.” Strive to communicate requirements expectations explicitly."],
  "translations": ["如果您没有正确地满足要求，那么执行其余项目的效果也就无关紧要。 你会失败的。", "午餐后您在办公桌上发现的便签纸，已保存的语音邮件和电子邮件，以及一半记忆的随机走廊对话的收集不构成一组要求。 这只是一堆信息。", "所有项目利益相关者的利益相交，在需求过程中无处不在。", "没有高质量的要求，利益相关者可能会对所交付的内容感到惊讶。 软件惊喜几乎总是坏消息。", "在探索需求时，请超越动手用户的范围。 您的客户一旦被移除，仍然是您的客户。", "人们不只是“收集”需求。 需求激发是探索，协作，发现和发明的过程，而不是简单的收集过程。 业务分析师并非仅仅是抄写员。", "激发需求的目的是使客户的声音-VOC-尽可能接近开发人员的耳朵-EOD。 业务分析师有助于缩小沟通差距。", "两种常用的需求启发做法是心灵感应和千里眼。 他们不工作。", "尽管我们的文化保持不变，但客户并不总是正确的。 但是客户总是有一个观点，您必须理解并尊重这一观点。", "需求开发需要迭代。 在第一次讨论中，您不能完全满足所有要求； 您可能永远无法使它们正常。 有效的需求开发涉及对细节和清晰度的逐步改进。", "不要担心记录要求。 与获取知识的成本相比，记录知识的成本很小。", "如果要求中未描述某些功能或特性，则没人期望在产品中看到它。", "需求开发的可交付成果不仅仅是一组书面需求。 这是一种共同的理解和一套共同的期望。", "需求开发的现实目标不是创建一组完美的需求，而是创建足以使团队以可接受的风险水平进行建设的需求。 由于忽视，不必要，不完整，模棱两可或沟通不畅的需求，这种风险不得不进行过多的计划外返工。", "我们有时会随意表达需求，因为我们假设读者拥有一个类似于我们自己的“敏感性过滤器”，但是人们经常以不同的方式解释相同的陈述。 这种含糊不清会导致不匹配的期望和交货时的意外。", "保持需求研讨会和审核小组的规模。 一大群人不同意离开燃烧室，更不用说就某些措辞应如何确切达成一致了。", "当有人提出新要求时，第一个要问的问题是：“这是范围吗？” 如果是，则必须解决。 如果不是，则至少现在不会。 但是，如果答案是“不，但应该如此”，那么您必须调整范围以适应它。 这对成本，进度，资源，承诺，优先级和权衡都有影响。", "如果您没有文档记录和已达成共识的项目范围，您怎么能知道自己是否正在经历范围蔓延？", "在决定要在产品或迭代中包括哪些功能时，请避免“分贝优先级”。 从业务角度来看，最大的客户不一定需要那些最重要的功能。", "项目涉众必须理解讨论可能的需求与承诺将其包含在产品中之间的区别。", "应该使您的血液发冷的两个术语是“假定要求”和“隐含要求”。 力争明确传达需求期望。"]
}, {
  "tag": "H1",
  "text": "On Project Management",
  "translation": "论项目管理"
}, {
  "tag": "OL",
  "texts": ["There’s no such specific activity as “project management.” Project management is an amalgam of people management, requirements management, risk management, opportunity management, expectation management, commitment management, change management, resource management, and supplier management.", "Why do organizations never have time to build software right, yet they always find the time, money, and people to fix it later? It’s a mystery.", "Everyone likes to think their team has top-flight talent, but half of all software developers are below average in capabilities. Where do all those people work?", "Don’t give anyone an estimate off the top of your head. The best response to a request for an estimate is, “Let me get back to you on that after I’ve thought about it.”", "No matter how much pressure others apply, never make a commitment you know you cannot fulfill.", "You’re in a stronger negotiating position when you have data available to build your case, because the other person almost certainly has no data at all.", "Unless you record your estimates and compare them to what actually happened, you will forever be guessing, not estimating.", "An estimate you give someone should not be influenced by what you think they want to hear.", "The project manager must have some flexibility around at least one of the five key dimensions: scope, schedule, staff, budget, and quality. If these are all imposed as constraints, you will fail."],
  "translations": ["没有“项目管理”这样的具体活动。 项目管理是人员管理，需求管理，风险管理，机会管理，期望管理，承诺管理，变更管理，资源管理和供应商管理的混合物。", "为什么组织永远没有时间来正确地构建软件，却总是会花时间，金钱和人力来修复软件？ 这是一个谜。", "每个人都喜欢认为自己的团队拥有顶尖人才，但是所有软件开发人员中有一半的能力都低于平均水平。 这些人在哪里工作？", "不要给任何人以高估。 对估算请求的最佳答复是：“在考虑之后，让我再与您联系。”", "无论别人施加多大压力，都不要做出自己无法实现的承诺。", "当您有可用的数据来审理案件时，您的谈判地位会更高，因为对方几乎可以肯定没有任何数据。", "除非您记录您的估计并将其与实际发生的情况进行比较，否则您将永远是猜测，而不是估计。", "您对某人的估算不应受到您认为他们想听到的声音的影响。", "项目经理必须在以下五个关键方面中的至少一个方面具有一定的灵活性：范围，进度，人员，预算和质量。 如果将所有这些都强加为约束，那么您将失败。"]
}, {
  "tag": "H1",
  "text": "On Quality and Process Improvement",
  "translation": "质量与流程改进"
}, {
  "tag": "OL",
  "texts": ["When it comes to software quality, you can pay me now or you can pay me a lot more later.", "Strive for perfection; settle for excellence.", "Never let your boss or your customer talk you into doing a bad job.", "Quality should be your top priority. Long-term productivity is a natural consequence of high quality because the teams need not spend so much time on wasteful rework.", "Strive to have a peer, rather than a customer, find a defect. Technical peer reviews are a proven technique for improving quality and productivity.", "No software engineering technique will work if you’re dealing with unreasonable people.", "When people are asked to work in some different way, their instinctive reaction is to ask “What’s in it for me?” But that’s the wrong question. The right question is “What’s in it for us?”", "Software people are always looking for cool tools, but remember that a fool with a tool is just an amplified fool.", "Enabling process change is hard when people aren’t aware of the pain caused by their current ways of working. It’s hard to sell a better mousetrap to people who don’t know they have mice.", "Q: How many software process leaders does it take to change a light bulb? A: Only one, but the light bulb must be willing to change.", "Don’t underestimate the need for — and the difficulty of — changing an organization’s culture as it moves toward new ways of working. Installing a new process is faster than instilling a new culture. You need both to succeed.", "Regardless of good intentions, improvement action plans that don’t turn into actions are not useful.", "Common sense, good judgment, and experience should trump formal process in many cases. Sometimes the process is there for a good reason, though. Find out before you decide to bypass it.", "When steering an organization toward new ways of working, use gentle pressure, relentlessly applied.", "The best motivation for changing how people work is pain. Not artificial, externally-applied pain, but the very real pain the team experiences from its current ways of working. Select those improvement activities that will ultimately reduce the pain.", "Unless you take the time to conduct retrospectives, study lessons learned, and continuously improve your team’s process, there’s no reason to expect the next project to go any better than the last project.", "You can’t change everything at once. Identify those process changes that will yield the greatest benefits and begin to implement them next Monday. I’m not kidding: next Monday!", "Adopt a “shrink to fit” philosophy with document templates. Begin with a rich template that reminds you think of information that should perhaps be included, and then mold it to the size, nature, and needs of each project.", "Many teams are being asked to do more with less. Too often, though, they aren’t provided with ways to enable them to do more with less. Without training and process improvement to increase efficiency and effectiveness, don’t expect higher productivity to magically happen.", "Informal processes that work fine for four people working in a single room do not scale to multiple development teams working on different continents.", "If there’s one thing the software industry is repeatable at, it’s doing the same silly things on project after project. Use retrospectives to learn, to understand, and to improve continually.", "Any time people aren’t following an established process you have only three choices: (1) start following the process; (2) adjust the process to make it more effective and practical and then follow it; or (3) throw away the process and stop pretending you follow it."],
  "translations": ["关于软件质量，您可以现在付钱给我，或者以后再付给我更多。", "力求完美； 追求卓越。", "切勿让老板或客户说服您做坏事。", "质量应该是您的重中之重。 长期的生产力是高质量的自然结果，因为团队不需要花太多时间进行浪费的返工。", "力求让同伴而不是客户发现缺陷。 同行技术评审是一种行之有效的技术，可以提高质量和生产率。", "如果您与不合理的人打交道，那么任何软件工程技术都不会起作用。", "当人们被要求以不同的方式工作时，他们的本能反应是问“对我有什么帮助？” 但这是一个错误的问题。 正确的问题是“对我们有什么帮助？”", "软件人员一直在寻找出色的工具，但请记住，使用工具的傻瓜只是放大的傻瓜。", "当人们不了解当前工作方式所带来的痛苦时，很难进行流程更改。 很难向不知道有老鼠的人出售更好的捕鼠器。", "问：更换灯泡需要多少软件过程负责人？ 答：只有一个，但灯泡必须愿意更换。", "不要低估在朝着新的工作方式发展的过程中改变组织文化的需求和困难。 安装新流程比灌输新文化快。 你们都需要成功。", "不管好意如何，没有转化为行动的改进行动计划都没有用。", "在许多情况下，常识，良好的判断力和经验应胜过正式程序。 但是，有时该过程存在是有充分理由的。 在决定绕过它之前先查找一下。", "在引导组织采用新的工作方式时，请施加不懈的压力。", "改变人们工作方式的最好动力是痛苦。 这不是人为的，外部施加的痛苦，而是团队从当前工作方式中经历的非常真实的痛苦。 选择那些最终可以减轻痛苦的改善活动。", "除非您花时间进行回顾，学习经验教训并不断改进团队的流程，否则没有理由期望下一个项目会比上一个项目做得更好。", "您无法一次更改所有内容。 确定那些将带来最大收益的流程变更，并在下周一开始实施。 我不是在开玩笑：下周一！", "在文档模板中采用“缩小以适应”的理念。 首先从一个丰富的模板开始，该模板可以提醒您考虑应该包含的信息，然后根据每个项目的规模，性质和需求来塑造它。", "许多团队被要求事半功倍。 不过，通常情况下，他们没有获得使他们事半功倍的方法。 如果没有培训和流程改进来提高效率和效果，就不要期望神奇地实现更高的生产率。", "对于在一个房间中工作的四个人来说可以正常工作的非正式流程，无法扩展到在不同大陆工作的多个开发团队。", "如果软件行业可以重复做一件事，那么一个项目又一个项目地做着同样愚蠢的事情。 使用回顾来学习，理解和不断改进。", "每当人们不遵循既定流程时，您只有三种选择：（1）开始遵循流程； （2）调整流程以使其更加有效和实用，然后加以遵循； 或（3）放弃该过程并停止假装您遵循该过程。"]
}, {
  "tag": "H1",
  "text": "Other Insights",
  "translation": "其他见解"
}, {
  "tag": "OL",
  "texts": ["Artificial intelligence is no substitute for the real thing.", "In the technology world, if you’re one week ahead of the other guy, you are a wizard.", "Today’s “gotta get it out right away” development project is tomorrow’s legacy system maintenance nightmare.", "Many problems with software systems take place at the interfaces: software-to-software, software-to-hardware, software-to-people, people-to-people. Study them carefully.", "People talk a lot about their “rights.” The flip side of every right is a responsibility. Think and act collaboratively.", "An ounce of design is worth a pound of refactoring.", "Watch out for “Management by Businessweek,” the rush to adopt the Hottest New Thing in software development just because someone read about the fabulous results it promises.", "Hold your thumb and index finger one inch apart. Most of the time that’s the only difference between quality and crap. It’s a matter of listening a little bit more, checking your work, running the test again, referring to the checklist, reading the directions, asking one more question. Often that’s all it takes to close the crap gap.", "You don’t have time to make every mistake that every software practitioner before you has already made. Read and respect the literature. Learn from your colleagues. Share your knowledge freely with others.", "Software development is perhaps 50 percent about computing and 50 percent about communication. But business analysis is entirely about communication. We are much better at the computing part.", "If you’re hanging out a shingle as an independent consultant or a contractor, you need to inform the world that you’re available. It doesn’t matter how good you are if no one knows you’re there.", "We do a lot of pretending in software. We pretend we’ve identified the right stakeholders, they understand their business objectives, and they know their requirements. We pretend the right people communicated the correct requirements to us and that we understood them and recorded them accurately. We pretend our estimates are accurate and that we’ve thought of all the necessary tasks. We pretend none of the risks that could undermine our project will materialize. I’m not a big fan of pretending. Sometimes I’m not that crazy about reality, but it’s all I’ve got, so I have to deal with it. Let’s stop pretending."],
  "translations": ["人工智能不能替代真实事物。", "在技术界，如果您比其他人早一个星期，那么您就是向导。", "今天的“必须立即解决”开发项目是明天遗留系统维护的噩梦。", "接口上会发生软件系统的许多问题：软件到软件，软件到硬件，软件到人，人到人。 仔细研究它们。", "人们谈论他们的“权利”很多。 每一项权利的另一面都是责任。 协同思考并采取行动。", "一盎司的设计值得一磅的重构。", "当心“商业周刊的管理”，匆忙在软件开发中采用最热门的新事物，只是因为有人读到了它所承诺的惊人结果。", "将拇指和食指分开一英寸。 在大多数情况下，这是质量和废话之间的唯一区别。 只是多听一点，检查工作，再次运行测试，参考清单，阅读说明，再问一个问题。 通常，这是弥补废话的唯一方法。", "您没有时间在每位软件从业人员犯错之前就犯错。 阅读并尊重文学作品。 向您的同事学习。 与他人自由分享您的知识。", "软件开发可能占计算的50％，有关通信的占50％。 但是业务分析完全是关于沟通的。 我们在计算方面要好得多。", "如果您想充当独立顾问或承包商的角色，则需要向全世界告知您有空。 如果没有人知道你在那里，你有多好都没关系。", "我们在软件中做很多假装。 我们假装已经找到了合适的利益相关者，他们了解他们的业务目标，并且知道他们的要求。 我们假装合适的人向我们传达了正确的要求，并且我们理解它们并准确记录了它们。 我们假装我们的估算是准确的，并且已经考虑了所有必要的任务。 我们假装不会破坏我们项目的任何风险。 我不喜欢假装。 有时候，我对现实并不那么疯狂，但这就是我所拥有的，所以我必须面对现实。 让我们停止假装。"]
}, {
  "tag": "P",
  "text": "===========",
  "translation": "==========="
}, {
  "tag": "P",
  "text": "Karl Wiegers is well known in the software world for his work on requirements, quality, and process improvement. If you’re interested in software requirements, business analysis, project management, software quality, or consulting, Process Impact provides numerous useful publications, downloads, and other resources.",
  "translation": "卡尔·威格斯（Karl Wiegers）在需求，质量和流程改进方面的工作在软件界众所周知。 如果您对软件需求，业务分析，项目管理，软件质量或咨询感兴趣，Process Impact提供了许多有用的出版物，下载和其他资源。"
}, {
  "tag": "PRE",
  "text": "(本文翻译自Karl Wiegers的文章《64 Lessons from 50 Years of Software Experience》，参考：https://medium.com/swlh/62-lessons-from-50-years-of-software-experience-2db0f400f706)",
  "translation": "（本文翻译自Karl Wiegers的文章，《 64年的50年软件经验教训》，参考：https：//medium.com/swlh/62-lessons-from-50-years-of-software-experience-2db0f400f706）"
}]