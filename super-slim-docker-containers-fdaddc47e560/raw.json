[{
  "tag": "H1",
  "text": "Conclusion",
  "translation": "结论"
}, {
  "tag": "P",
  "text": "Creating Docker images for containers is a process that modern software engineers have to deal with very often. There are plenty of online resources and examples showing you how to create a Dockerfile, however, you should keep an eye on the size of your resulting image.",
  "translation": "为容器创建Docker映像是现代软件工程师必须经常处理的过程。 有大量在线资源和示例向您展示如何创建Dockerfile，但是，您应注意生成的映像的大小。"
}, {
  "tag": "P",
  "text": "In this piece, we reviewed several methods and tips to minimise the final size of a Docker image. By carefully crafting a Dockerfile including only necessary artefacts, choosing an appropriate base image, and using multi-stage builds, the final size of a Docker image can be reduced considerably.",
  "translation": "在本文中，我们回顾了一些方法和技巧，以最大程度地减少Docker映像的最终大小。 通过精心制作仅包含必要工件的Dockerfile，选择合适的基础映像并使用多阶段构建，可以大大减少Docker映像的最终大小。"
}, {
  "tag": "H1",
  "text": "Multi-Stage Builds",
  "translation": "多阶段构建"
}, {
  "tag": "P",
  "text": "Multi-stage builds were the centre of attention back when Docker 17.05 became available. A long-awaited feature, a multi-stage build allows image builders to leave custom image build scripts behind and integrate everything into the well-known Dockerfile format.",
  "translation": "当Docker 17.05可用时，多阶段构建成为关注的焦点。 期待已久的功能，多阶段构建允许映像构建器将自定义映像构建脚本抛在后面，并将所有内容集成到众所周知的Dockerfile格式中。"
}, {
  "tag": "P",
  "text": "In high-level terms, you can think of a multi-stage build as merging multiple Dockerfiles together, or simply a Dockerfile with multiple FROMs.",
  "translation": "用高级术语来说，您可以将多阶段构建视为将多个Dockerfile合并在一起，或者简单地将一个具有多个FROM的Dockerfile合并。"
}, {
  "tag": "P",
  "text": "Before multi-stage builds, if you wanted to build the artefact of your project and distribute it in a container using a Dockerfile, you probably had to follow a build process ending up with a container like the one depicted below:",
  "translation": "在进行多阶段构建之前，如果要构建项目的工件并使用Dockerfile将其分发到容器中，则可能必须遵循一个构建过程，最终以一个如下图所示的容器结束："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*qRXwW06uZVsFDcnHdQbjMg.png?q=20",
  "caption": "Building and distributing your application without multi-stage builds (Image by the author)",
  "type": "image",
  "file": "1!qRXwW06uZVsFDcnHdQbjMg.png"
}, {
  "tag": "P",
  "text": "Although there is nothing technically wrong with the above process, the final image and the resulting container are bloated with layers created while building/preparing the project artefact that are not necessary for the project’s runtime environment.",
  "translation": "尽管上述过程在技术上没有任何问题，但最终图像和生成的容器在构建/准备项目人工制品时创建的层上都layers肿了，这些层对于项目的运行时环境不是必需的。"
}, {
  "tag": "P",
  "text": "Multi-stage builds allow you to separate the creation/preparation phases from the runtime environment:",
  "translation": "多阶段构建使您可以将创建/准备阶段与运行时环境分开："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*9kPkddThEtw8s7jmvTVNfg.png?q=20",
  "caption": "Multi-stage builds, separation creation/preparation from runtime (image by author)",
  "type": "image",
  "file": "1!9kPkddThEtw8s7jmvTVNfg.png"
}, {
  "tag": "P",
  "text": "You can still have a single Dockerfile to define your complete build workflow. However, you can copy artefacts from one stage to another while discarding the data in layers you don’t need.",
  "translation": "您仍然可以使用单个Dockerfile定义完整的构建工作流程。 但是，您可以将文物从一个阶段复制到另一个阶段，同时将数据丢弃在不需要的层中。"
}, {
  "tag": "P",
  "text": "Note: Multi-stage builds allow you to create cross-platform, repeatable builds without using OS-specific, custom build scripts. The final size of your image can be kept to a minimum by selectively including artefacts generated in previous phases of your build.",
  "translation": "注意：多阶段构建允许您创建跨平台的可重复构建，而无需使用特定于操作系统的自定义构建脚本。 通过有选择地包括在构建的前几个阶段中生成的伪像，可以使图像的最终大小保持最小。"
}, {
  "tag": "H1",
  "text": "Choose No Base Image at All",
  "translation": "完全不选择基础图像"
}, {
  "tag": "P",
  "text": "If you have an application that can run without any additional environment provided by a base image, you can opt to not use a base image at all. Of course, since FROM is mandatory in a Dockerfile, you must still have it and point it to something. What should you use in that case?",
  "translation": "如果您的应用程序可以在没有基础映像提供任何其他环境的情况下运行，则可以选择完全不使用基础映像。 当然，由于FROM在Dockerfile中是强制性的，因此您仍然必须拥有它并将其指向某个内容。 在这种情况下，您应该使用什么？"
}, {
  "tag": "P",
  "text": "Scratch, which is:",
  "translation": "从头开始，即："
}, {
  "tag": "P",
  "text": "“An explicitly empty image, especially for building images “FROM scratch”. This image is most useful in the context of building base images (such as debian and busybox) or super minimal images (that contain only a single binary and whatever it requires, such as hello-world). FROM scratch is a no-op in the Dockerfile, and will not create an extra layer in your image.”",
  "translation": "“一个明显为空的图像，特别是对于构建图像“从零开始”。 在构建基础映像（例如debian和busybox）或超小型映像（仅包含一个二进制文件以及它所需要的任何内容，例如hello-world）的上下文中，此映像最有用。 从头开始是Dockerfile中的一项禁止操作，并且不会在映像中创建额外的层。”"
}, {
  "tag": "P",
  "text": "Note: If your application consists of self-contained executables that can operate in a standalone fashion, choosing the scratch base image allows you to minimise the footprint of your container as much as possible.",
  "translation": "注意：如果您的应用程序包含可以以独立方式运行的自包含可执行文件，则选择暂存基础映像可以使您尽可能减少容器的占用空间。"
}, {
  "tag": "H1",
  "text": "Choose a Base Image",
  "translation": "选择基本图像"
}, {
  "tag": "P",
  "text": "Every Dockerfile starts with a FROM directive. This is where we define the base image upon which our own image will be created.",
  "translation": "每个Dockerfile都以FROM指令开头。 在此定义我们将在其上创建自己的图像的基础图像。"
}, {
  "tag": "P",
  "text": "As noted in the Docker documentation:",
  "translation": "如Docker文档中所述："
}, {
  "tag": "P",
  "text": "“The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions. As such, a valid Dockerfile must start with a FROM instruction. The image can be any valid image — it is especially easy to start by pulling an image from the Public Repositories.”",
  "translation": "“ FROM指令初始化一个新的构建阶段，并为后续指令设置基础映像。 因此，有效的Dockerfile必须以FROM指令开头。 该图像可以是任何有效的图像-从公共存储库中提取图像特别容易。”"
}, {
  "tag": "P",
  "text": "Obviously, there is a ton of different base images to choose from, each one with its own perks and features. Choosing an image which provides just enough of the tools and the environment you need for your application to run is of paramount importance when it comes to the final size of your own Docker image.",
  "translation": "显然，有很多不同的基础图像可供选择，每个基础图像都有自己的优势和功能。 当涉及到您自己的Docker映像的最终大小时，选择一个足以提供应用程序运行所需的工具和环境的映像至关重要。"
}, {
  "tag": "P",
  "text": "The size of different popular base images varies considerably, as you’d expect:",
  "translation": "正如您所期望的那样，不同的流行基本图像的大小差异很大："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*PVqKv8Jz0lSFzf0KOK27iA.png?q=20",
  "caption": "Popular Docker base images size (Image by the author)",
  "type": "image",
  "file": "1!PVqKv8Jz0lSFzf0KOK27iA.png"
}, {
  "tag": "P",
  "text": "Effectively, containerising your application using an Ubuntu 19.10 base image will add a minimum of 73 MB, whereas the exact same application using an Alpine 3.10.3 base image will only increase the size by an extra 6 MB. As Docker caches image layers, the download/bandwidth penalty is applicable only the first time you’re about to start a container with that image (or simply, when pulling the image). However, the increased size is still there.",
  "translation": "实际上，使用Ubuntu 19.10基本映像对应用程序进行容器化将至少增加73 MB，而使用Alpine 3.10.3基本映像的完全相同的应用程序只会使大小增加6 MB。 随着Docker缓存图像层，下载/带宽损失仅在您第一次使用该图像启动容器时适用（或者简单地，在拉取图像时）。 但是，增加的大小仍然存在。"
}, {
  "tag": "P",
  "text": "At this point, you may have arrived at the following (pretty logical) conclusion: “I will always use Alpine then!”. If only things were that clear in software.",
  "translation": "此时，您可能已经得出以下（非常合逻辑的）结论：“那么，我将永远使用Alpine！”。 如果在软件中只有那么清楚的话。"
}, {
  "tag": "P",
  "text": "You see, the guys behind Alpine Linux haven’t discovered a special secret sauce that Ubuntu or Debian guys are still looking for. To be able to create a Docker image an order of magnitude smaller than (for instance) Debian, they had to make some decisions regarding what to include and what not to include in their Alpine image. Before choosing Alpine as your default base image, you should check if it provides all the environment you need. Also, even though Alpine comes with a package manager, you may find that a specific package or package version you’re using in your (for instance) Ubuntu-based development environment isn’t available in Alpine. These are tradeoffs you should be aware of and test before you choose the most appropriate base image for your project.",
  "translation": "您会发现，Alpine Linux背后的家伙还没有发现Ubuntu或Debian家伙仍在寻找的特殊秘密调味料。 为了能够创建比Debian小（例如）小的数量级的Docker映像，他们必须对Alpine映像中要包含的内容和不包含的内容做出一些决定。 在选择Alpine作为默认基本映像之前，应检查它是否提供了所需的所有环境。 此外，即使Alpine随附了软件包管理器，您也可能会发现Alpine中不提供您在（例如）基于Ubuntu的开发环境中使用的特定软件包或软件包版本。 在为项目选择最合适的基础映像之前，您应该了解这些权衡并进行测试。"
}, {
  "tag": "P",
  "text": "Finally, if you really need to use one of the fatter base images, you could use an image minimisation tool, such as the free and open source DockerSlim, to still reduce the size of your final image.",
  "translation": "最后，如果您确实需要使用一个较胖的基础映像，则可以使用映像最小化工具（例如免费和开源DockerSlim）来减小最终映像的大小。"
}, {
  "tag": "P",
  "text": "Note: Choosing an appropriate base image for your own image is important when trying to keep the size down. Evaluate your options and choose an image that provides the tools you need for the size you can afford.",
  "translation": "注意：在尝试减小尺寸时，为自己的图像选择适当的基础图像很重要。 评估您的选择并选择一张图像，该图像可提供您所需的工具，以确保您可以承受的尺寸。"
}, {
  "tag": "H1",
  "text": "Delete Caches",
  "translation": "删除缓存"
}, {
  "tag": "P",
  "text": "Very often when we containerise an application, we need to make extra tools, libraries, or utilities available on the image we build by using a package manager such as apk, yum, or apt.",
  "translation": "通常，当我们将应用程序容器化时，我们需要使用软件包管理器（例如apk，yum或apt）在生成的映像上提供额外的工具，库或实用程序。"
}, {
  "tag": "P",
  "text": "Package managers try to save us time and bandwidth when we install packages by caching previously fetched packages. To keep the size of our resulting Docker image as small as possible, we don’t need to keep package manager caches. After all, if we ever need a different image for our containers, we can always rebuild the image with an updated Dockerfile.",
  "translation": "当我们通过缓存先前获取的软件包来安装软件包时，软件包管理器试图为我们节省时间和带宽。 为了使生成的Docker映像的尺寸尽可能小，我们不需要保留程序包管理器缓存。 毕竟，如果我们的容器需要其他映像，我们总是可以使用更新的Dockerfile重建映像。"
}, {
  "tag": "P",
  "text": "To delete package manager caches for the three popular package managers above, we can add the following command at the end of our aggregated (i.e., commands merge) command, for example:",
  "translation": "要删除上述三个流行的软件包管理器的软件包管理器缓存，我们可以在聚合（即命令合并）命令的末尾添加以下命令，例如："
}, {
  "tag": "PRE",
  "text": "APK: ... && rm -rf /etc/apk/cacheYUM: ... && rm -rf /var/cache/yumAPT: ... && rm -rf /var/cache/apt",
  "translation": "APK：... && rm -rf / etc / apk / cacheYUM：... && rm -rf / var / cache / yumAPT：... && rm -rf / var / cache / apt"
}, {
  "tag": "P",
  "text": "Note: Before finalising your Docker image, don’t forget to remove any caches that were used during the build as well as any other temporary files that aren’t necessary for your container to run properly.",
  "translation": "注意：在最终确定Docker映像之前，请不要忘记删除构建期间使用的所有缓存以及容器正常运行所不需要的任何其他临时文件。"
}, {
  "tag": "H1",
  "text": "Normalise Your Image Layers",
  "translation": "标准化图像层"
}, {
  "tag": "P",
  "text": "The maximum number of layers an image can have is 127, provided your underlying storage driver supports it. This limit can be increased if really needed, but then you narrow your choices of where this image can be built (i.e., you need a Docker engine running on a similarly modified underlying Kernel).",
  "translation": "如果基础存储驱动程序支持，则图像可以具有的最大层数为127。 如果确实需要，可以增加此限制，但是随后您可以缩小构建该映像的位置的选择（即，您需要在类似修改的基础内核上运行的Docker引擎）。"
}, {
  "tag": "P",
  "text": "As discussed in the section on Docker image layers, above, because of UnionFS, whatever file resource goes into a layer stays in the layer even if you rm that file in a subsequent layer. Let’s see that with a sample Dockerfile:",
  "translation": "正如上面有关Docker映像层的部分中所讨论的，由于UnionFS，进入层的任何文件资源都保留在该层中，即使您在后一层中管理该文件也是如此。 我们来看一个示例Dockerfile："
}, {
  "tag": "PRE",
  "text": "FROM alpineRUN wget http://xcal1.vodafone.co.uk/10MB.zip -P /tmpRUN rm /tmp/10MB.zip",
  "translation": "从alpineRUN wget http://xcal1.vodafone.co.uk/10MB.zip -P / tmpRUN rm /tmp/10MB.zip"
}, {
  "tag": "P",
  "text": "Build the above image:",
  "translation": "构建以上图像："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*t8Yz5y-jb0ddd0zfzeeSOA.png?q=20",
  "caption": "Building a sample image with wasted space (Image by the author)",
  "type": "image",
  "file": "1!t8Yz5y-jb0ddd0zfzeeSOA.png"
}, {
  "tag": "P",
  "text": "And inspect it with dive:",
  "translation": "并进行潜水检查："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*hDS-CyG9vY0dchv3eXejuQ.png?q=20",
  "caption": "Image is only 34% efficient (Image by the author)",
  "type": "image",
  "file": "1!hDS-CyG9vY0dchv3eXejuQ.png"
}, {
  "tag": "P",
  "text": "An efficiency of 34% signifies that there is quite a lot of space wasted in our image. This results in longer image fetch times, additional consumed bandwidth, and slower startup times.",
  "translation": "效率为34％表示图像中浪费了很多空间。 这将导致更长的图像获取时间，额外的带宽消耗和更慢的启动时间。"
}, {
  "tag": "P",
  "text": "How can we get rid of this wasted space?",
  "translation": "我们如何摆脱这个浪费的空间？"
}, {
  "tag": "H2",
  "text": "Commands merge",
  "translation": "命令合并"
}, {
  "tag": "P",
  "text": "Have you ever seen a Dockerfile with an extremely long RUN directive where multiple shell commands are aggregated with &&? That’s commands merge.",
  "translation": "您是否见过带有RUN指令非常长的Dockerfile，其中多个Shell命令与&&聚合在一起？ 命令合并。"
}, {
  "tag": "P",
  "text": "By merging commands, we essentially create a single layer out of the result of this single long command. Since no intermediate layers exist where files are added and later removed in another layer, the final layer will not use any space for such ghost files. Let’s see that by modifying the above Dockerfile:",
  "translation": "通过合并命令，我们实际上是根据此单个long命令的结果创建了一个单独的层。 由于不存在用于添加文件并随后在另一层中删除文件的中间层，因此最后一层将不会为此类幻影文件使用任何空间。 让我们通过修改上述Dockerfile来了解这一点："
}, {
  "tag": "PRE",
  "text": "FROM alpineRUN wget http://xcal1.vodafone.co.uk/10MB.zip -P /tmp && rm /tmp/10MB.zip",
  "translation": "从alpineRUN wget http://xcal1.vodafone.co.uk/10MB.zip -P / tmp && rm /tmp/10MB.zip"
}, {
  "tag": "P",
  "text": "Now we have an optimised image:",
  "translation": "现在我们有了一个优化的图像："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*0jAMveRQUEryzTJLl_QpdA.png?q=20",
  "caption": "A 100% optimised image with commands merge (Image by the author)",
  "type": "image",
  "file": "1!0jAMveRQUEryzTJLl_QpdA.png"
}, {
  "tag": "P",
  "text": "When you finish building your Dockerfile, inspect it to see if you can merge commands to reduce possible wasted space.",
  "translation": "当您完成构建Dockerfile时，请检查它以查看是否可以合并命令以减少可能的浪费空间。"
}, {
  "tag": "H2",
  "text": "Squashing the image",
  "translation": "挤压图像"
}, {
  "tag": "P",
  "text": "An alternative approach to commands merge, especially when using someone else’s Dockerfile that you don’t want or can’t modify, is to build your image with Docker’s squash command.",
  "translation": "命令合并的另一种方法是使用Docker的squash命令构建映像，尤其是在使用您不希望或无法修改的其他Dockerfile时。"
}, {
  "tag": "P",
  "text": "Unless you’re on a very old Docker version (<1.13), Docker allows us to squash all our layers into a single layer, effectively removing all ghost resources. We can still use the original, unchangedDockerfile with the many individual commands, but this time we execute the build passing the --sqash option:",
  "translation": "除非您使用的是非常老的Docker版本（<1.13），否则Docker允许我们将所有层压缩为一个层，从而有效地删除所有虚幻资源。 我们仍然可以将原始的，未更改的Dockerfile与许多单独的命令一起使用，但是这次我们通过--sqash选项执行构建："
}, {
  "tag": "PRE",
  "text": "docker build --squash .",
  "translation": "码头工人建造--squash。"
}, {
  "tag": "P",
  "text": "The resulting image is, again, 100% optimised:",
  "translation": "再次对生成的图像进行100％优化："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*ZSDoffdMkVtgSvxo72p0ZQ.png?q=20",
  "caption": "A 100% optimised image with image squash (Image by the author)",
  "type": "image",
  "file": "1!ZSDoffdMkVtgSvxo72p0ZQ.png"
}, {
  "tag": "P",
  "text": "An interesting point to notice here is that since our Dockerfile created a layer to add a file and then created another layer to remove that file, squash is clever enough to realise that no layers need to be created (we only have the 9ccd9… layer from the base image we’re using). Extra kudos to squash then. However, take into account that squashing your layers may prevent you or the users of your image from taking advantage of previously cached layers.",
  "translation": "这里需要注意的有趣一点是，由于我们的Dockerfile创建了一个添加文件的层，然后创建了另一个删除该文件的层，所以squash足够聪明，以至于无需创建任何层（我们只有9ccd9…层 我们正在使用的基本图片）。 然后，额外的荣誉就可以南瓜了。 但是，请注意，挤压图层可能会阻止您或您的图像用户利用先前缓存的图层。"
}, {
  "tag": "P",
  "text": "Note: When working with a third-party Dockerfile that you don’t want to change, a quick and easy way to minimise any possible wasted space is to build it with --squash. You may use a tool dive to check the final efficiency of the image.",
  "translation": "注意：使用您不想更改的第三方Dockerfile时，一种最小化任何可能浪费空间的快速简便方法是使用--squash构建它。 您可以使用潜水工具检查图像的最终效率。"
}, {
  "tag": "H1",
  "text": "Beware of Your Build Path",
  "translation": "提防构建路径"
}, {
  "tag": "P",
  "text": "What’s the most common way in which we build our Docker images?",
  "translation": "我们构建Docker映像的最常见方式是什么？"
}, {
  "tag": "PRE",
  "text": "docker build .",
  "translation": "码头工人建设。"
}, {
  "tag": "P",
  "text": "The . in the above command tells Docker that we consider the current working folder as the root file system path of the build process.",
  "translation": "的。 上面的命令告诉Docker我们将当前的工作文件夹视为构建过程的根文件系统路径。"
}, {
  "tag": "P",
  "text": "To better understand what really happens when the above command is issued, we should keep in mind that a Docker build is a client-server process. The Docker CLI (client), where we execute the docker build command from, uses the underlying Docker engine (server) to build a container image. To restrict access to the underlying file system of the client, the build process needs to know what the virtual file system root is. It is under this exact path that any command in your Dockerifle tries to find file resources that can potentially end up within the image being built.",
  "translation": "为了更好地理解发出上述命令时实际发生的情况，我们应该记住，Docker构建是一个客户端-服务器进程。 我们从中执行docker build命令的Docker CLI（客户端）使用基础Docker引擎（服务器）来构建容器映像。 为了限制对客户端基础文件系统的访问，构建过程需要知道虚拟文件系统的根目录是什么。 正是在此确切路径下，Dockerifle中的任何命令都试图查找可能最终在正在生成的映像中结束的文件资源。"
}, {
  "tag": "P",
  "text": "Let’s consider for a moment the location where we usually place our Dockerfile. In the root of the project, maybe? Well, combine a Dockerfile in the root of the project with a docker build and we have effectively added the complete project folder as potential file resources for the build. This may result in multiple MBs and thousands of files unnecessarily being added in the build context. If we carelessly define an ADD/COPY command in the Dockerfile, all those files can be part of the final image. Most of the time, this is not what we need as only a few selected project artefacts should be included in the final container image.",
  "translation": "让我们考虑一下我们通常放置Dockerfile的位置。 在项目的根源中，也许吧？ 好吧，将项目根目录中的Dockerfile与Docker构建相结合，我们已经有效地添加了完整的项目文件夹作为构建的潜在文件资源。 这可能会导致在构建上下文中不必要地添加多个MB和数千个文件。 如果我们不小心在Dockerfile中定义了ADD / COPY命令，则所有这些文件都可以成为最终映像的一部分。 在大多数情况下，这不是我们所需要的，因为最终容器映像中仅应包含一些选定的项目人工制品。"
}, {
  "tag": "P",
  "text": "Always check that you provide an appropriate build path to docker build and that your Dockerfile doesn’t add unnecessary files to your image. If for any reason you really need to define the root of your project as the build context, you can selectively include/exclude files via .dockerignore.",
  "translation": "始终检查是否为Docker构建提供了适当的构建路径，并且Dockerfile没有向镜像添加不必要的文件。 如果出于任何原因确实需要将项目的根目录定义为构建上下文，则可以通过.dockerignore有选择地包括/排除文件。"
}, {
  "tag": "H1",
  "text": "Docker Image Layers",
  "translation": "Docker映像层"
}, {
  "tag": "P",
  "text": "A Docker container image is essentially piled-up files to be instantiated later on as a running container. Docker utilises the Union File System (UnionFS) design, in which files are grouped together in layers. Each layer may contain one or more files, and every layer is positioned on top of the previous layer. It is the virtual runtime merge of all the content of all layers that, as end users, we experience as a unified file system:",
  "translation": "Docker容器映像本质上是堆积的文件，稍后将被实例化为正在运行的容器。 Docker利用联合文件系统（UnionFS）设计，其中文件按层分组在一起。 每一层可能包含一个或多个文件，并且每一层都位于上一层的顶部。 作为最终用户，我们体验了作为统一文件系统的所有层的所有内容的虚拟运行时合并："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*LH1Z8UQgdA_FpdgdXe6D0Q.png?q=20",
  "caption": "A simplified view of UnionFS (Image by the author)",
  "type": "image",
  "file": "1!LH1Z8UQgdA_FpdgdXe6D0Q.png"
}, {
  "tag": "P",
  "text": "The final file system view presented to us by the underlying implementation of UnionFS (Docker supports quite a few different ones via pluggable storage drivers) has the total size of all the layers it comprises. When Docker creates a container for an image, it uses all the image’s layers in a read-only format, adding a thin read-write layer on top of them. This thin read-write layer is what allows us to actually modify files in a running Docker container:",
  "translation": "UnionFS的底层实现向我们提供的最终文件系统视图（Docker通过可插拔存储驱动程序支持许多不同的视图）具有其所构成的所有层的总大小。 Docker为图像创建容器时，它将以只读格式使用图像的所有层，并在它们之上添加一个薄的读写层。 这个薄的读写层使我们能够实际修改正在运行的Docker容器中的文件："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*iIXCoaf1stlcpgwiFUuqLA.png?q=20",
  "caption": "A running container adds a read-write layer on top of an image’s read-only layers. (Image by the author)",
  "type": "image",
  "file": "1!iIXCoaf1stlcpgwiFUuqLA.png"
}, {
  "tag": "P",
  "text": "What happens if a file is deleted in Layer 4 above? Although the deleted file won’t appear in the observed file system anymore, the size it originally occupied will still be part of the container’s footprint as the file was included in a lower, read-only layer.",
  "translation": "如果在上述第4层中删除了文件，会发生什么情况？ 尽管已删除的文件不会再出现在观察到的文件系统中，但是由于该文件包含在较低的只读层中，因此它最初占用的大小仍将是容器占用空间的一部分。"
}, {
  "tag": "P",
  "text": "It’s relatively easy to start with a small app binary and end up with a fat container image. In the following sections, we’ll explore different methods to keep the size of our images as thin as possible.",
  "translation": "从一个小的应用程序二进制文件开始到以一个胖容器图像结束是相对容易的。 在以下各节中，我们将探索不同的方法来使图像的尺寸尽可能地薄。"
}, {
  "tag": "H1",
  "text": "Super-Slim Docker Containers",
  "translation": "超薄Docker容器"
}, {
  "tag": "H2",
  "text": "A guide to reducing the size of your Docker images",
  "translation": "减少Docker映像大小的指南"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/0*elvoT6absf6Wl9GY?q=20",
  "caption": "Photo by William Warby on Unsplash",
  "type": "image",
  "file": "0!elvoT6absf6Wl9GY"
}, {
  "tag": "P",
  "text": "Have you ever wondered why your single-app Docker container grows to 400 MB? Or maybe why a single app binary of a few tens of MBs results in a multi-MB Docker image?",
  "translation": "您是否曾经想过为什么您的单应用程序Docker容器会增长到400 MB？ 或者，也许为什么一个只有几十MB的应用程序二进制文件会生成一个MB的Docker映像？"
}, {
  "tag": "P",
  "text": "In this piece, we’ll review some of the major factors contributing to the fattening up of your containers, as well as best practices and tips to end up with super-slim Docker containers for your project.",
  "translation": "在本文中，我们将回顾一些导致容器变胖的主要因素，以及为您的项目提供超薄Docker容器的最佳实践和技巧。"
}, {
  "tag": "PRE",
  "text": "(本文翻译自Nassos Michas的文章《Super-Slim Docker Containers》，参考：https://medium.com/better-programming/super-slim-docker-containers-fdaddc47e560)",
  "translation": "（本文翻译自Nassos Michas的文章《 Super-Slim Docker Containers》，参考：https：//medium.com/better-programming/super-slim-docker-containers-fdaddc47e560）"
}]